 <properties>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>
  
  <dependencies>
 <!-- https://mvnrepository.com/artifact/org.testng/testng -->
<dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>7.6.1</version>
    <scope>test</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.4.0</version>
</dependency>
 <!-- https://mvnrepository.com/artifact/io.perfeccionista.framework/pagefactory-web-api -->
<dependency>
   <groupId>org.apache.poi</groupId>
   <artifactId>poi</artifactId>
   <version>3.9</version>
</dependency> 
<dependency>
   <groupId>xml-apis</groupId>
   <artifactId>xml-apis</artifactId>
   <version>1.4.01</version>
</dependency>
<dependency>
   <groupId>org.apache.poi</groupId>
   <artifactId>poi-ooxml</artifactId>
   <version>3.9</version>
   <exclusions>
     <exclusion>
       <artifactId>xml-apis</artifactId>
       <groupId>xml-apis</groupId>
     </exclusion>       
   </exclusions>
</dependency>

	<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox -->
<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>pdfbox</artifactId>
    <version>2.0.26</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox -->
<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>fontbox</artifactId>
    <version>2.0.26</version>
</dependency>

<!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
<dependency>
    <groupId>commons-logging</groupId>
    <artifactId>commons-logging</artifactId>
    <version>1.2</version>
</dependency>


  </dependencies>


----------------------------------------------------------

package Galaxy;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;

import java.io.Closeable;
import java.io.File;

public class utility {

	public FileInputStream fi;
	public FileOutputStream fo;
	public XSSFWorkbook workBook;
	public XSSFSheet sheet;
	public XSSFRow row;
	public XSSFCell cell;
	public CellStyle style;
	String path;
	
	utility(String path)

	{
		this.path = path;
	}
	
	 {
		// TODO Auto-generated constructor stub
	}

	public int getRowCount(String sheetName)
	{
		int rowCount = 0;
		try{
			fi = new FileInputStream(path);
			 workBook = new XSSFWorkbook(fi);
		sheet = workBook.getSheet(sheetName);
			rowCount = sheet.getLastRowNum(); // it returns the last initialized row in the sheet
			((Closeable) workBook).close();
			fi.close();
			
		}
		catch(Exception ecp){
			System.out.println("Row Count Not Working");
			}
		return rowCount;
	}
	
	public int getCellCount(String sheetName, int rowNum ) throws IOException
	{
		int cellCount = 0;
		try{
			fi = new FileInputStream(path);
			 workBook = new XSSFWorkbook(fi);
		sheet = workBook.getSheet(sheetName);
		    row = sheet.getRow(rowNum);
			cellCount = row.getLastCellNum(); // it returns the last initialized row in the sheet
			((Closeable) workBook).close();
			fi.close();
			
		}
		catch(Exception ecp){
			System.out.println("Cell Count Not Working");
			}
		return cellCount;
	}
	
	public String getCellData(String sheetName, int rowNum, int column) throws IOException
	{
	
			fi = new FileInputStream(path);
			 workBook = new XSSFWorkbook(fi);
		sheet = workBook.getSheet(sheetName);
		    row = sheet.getRow(rowNum);
		    cell = row.getCell(column);
		DataFormatter formatter = new DataFormatter();
		String data;
		
			
		try {
			data = formatter.formatCellValue(cell); // Returns the value of cell in a string
		}
		catch(Exception e){
			data="";
			}
		((Closeable) workBook).close();
		fi.close();
		return data;
	}
	
	public void setCellData(String sheetName, int rowNum, int column, String data) throws IOException
	{
		File xlfile = new File (path);
		if(!xlfile.exists()) // If file not exists, it will create a file
		{
			workBook= new XSSFWorkbook();
			fo = new FileOutputStream(path);
			workBook.write(fo);
		}
		
		fi = new FileInputStream(path);
		 workBook = new XSSFWorkbook(fi);
		 
		 if (workBook.getSheetIndex(sheetName)==-1) // if sheet doesnt exist, create a new sheet
		 { workBook.createSheet(sheetName);}
		 
		 sheet = workBook.getSheet(sheetName);
		 
		 if (sheet.getRow(rowNum)==null) // if row doesnt exist, create a new sheet
		 { sheet.createRow(rowNum); }
		 
		 row = sheet.getRow(rowNum);
		 
		 cell = row.createCell(column);
		 cell.setCellValue(data);
		 fo = new FileOutputStream (path);
		 workBook.write(fo);
		 ((Closeable) workBook).close();
		 fi.close();
		 fo.close();
		 
		 
		 
		
	}

}
--------------------------------------------------

package Galaxy;

import java.util.List;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class elements {
	WebDriver driver; 
	

	public elements(WebDriver driver) {
           this.driver=driver;
		
		PageFactory.initElements(driver ,this);
		System.out.println("Parameterized Constructer");
			// TODO Auto-generated constructor stub
		}




	@FindBy(xpath= "//img[@class=\"tp-rs-img\"]")
	WebElement mainImage;
	
	@FindBy(xpath= "//ul[@id=\"menu-all-departments-1\"]/descendant::a[@title=\"Printer & Scanner\"]/parent::li")
	WebElement printerAndScanner;
	
	@FindBy(xpath="//span[text()=\"PRODUCTS\"]")
	WebElement products;
	
	@FindBy(xpath="//ul[@class=\"dropdown-menu yamm\"]//strong[text()='Printers']//parent::li//following-sibling::li//a")
	List <WebElement> printer;
	
	@FindBy(xpath="//div[@class=\"electro-navigation yes-home\"]//a[@title=\"Printer & Scanner\"]//following-sibling::ul//ul[1]")
	List <WebElement> toner;
	
	@FindBy(xpath="//div[@class=\"electro-navigation yes-home\"]//a[@title=\"Printer & Scanner\"]//following-sibling::ul//ul[1]")
	List <WebElement> scanner;
	
	
	
	
	@FindBy(xpath="//a[text()=\"Epson\"]")
	WebElement epson;
	
	@FindBy(xpath="//a[text()=\"HP\"]")
	WebElement HP;
	
	@FindBy(xpath="//strong[text()=\"Toner & Cartridges\"]")
	WebElement headerTC;
	
	
	
	
	
	
	
	

}

-------------------------------


package Galaxy;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeTest;

import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;

public class NewTest {
	
	
	public WebDriver driver;
	public elements obj;
	
	
	
	
	
  @Test
  public void f() {
  }
  @BeforeTest
  public void beforeTest() {
	  System.out.println("Start");
		System.setProperty("webdriver.chrome.driver","C://Users//4130//Desktop//Chrome/chromedriver.exe");
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://galaxy.pk/");
		
		obj= new elements (driver);
  }
  
  @Test(priority=1)
  public void Header() throws InterruptedException
  {
	  Actions action = new Actions(driver);
	  WebDriverWait wait= new WebDriverWait(driver, Duration.ofSeconds(15));
		wait.until(ExpectedConditions.visibilityOf(obj.mainImage));
		wait.until(ExpectedConditions.visibilityOf(obj.products));
		action.moveToElement(obj.products).perform();
		wait.until(ExpectedConditions.visibilityOf(obj.printerAndScanner));
		action.moveToElement(obj.printerAndScanner).perform();
	  System.out.println(obj.printer.get(0).getText());
	  
	  
	  
	  
	  
	  
	  
	  
	  /* Actions action = new Actions(driver);
	  WebDriverWait wait= new WebDriverWait(driver, Duration.ofSeconds(15));
		wait.until(ExpectedConditions.visibilityOf(obj.mainImage));
		wait.until(ExpectedConditions.visibilityOf(obj.products));
		action.moveToElement(obj.products).perform();
		wait.until(ExpectedConditions.visibilityOf(obj.printerAndScanner));
		action.moveToElement(obj.printerAndScanner).perform();
		Thread.sleep(5000); */
  }

  @AfterTest
  public void afterTest() {
	  
  }

}
