package GalaxySite;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.AfterTest;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.time.Duration;

import javax.imageio.ImageIO;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class NewTest {
	
	
	public WebDriver driver;
	public elements obj;
	
	
	
	
	
  @Test
  public void f() {
  }
  @BeforeTest
  public void beforeTest() {
	  System.out.println("Start");
	  System.setProperty("webdriver.chrome.driver","C://Users//Mian Ali Haider//Desktop//Chrome Driver/chromedriver.exe");
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://galaxy.pk/");
		
		obj= new elements (driver);
		String path = "C:\\Users\\Mian Ali Haider\\eclipse-workspace\\Galaxy\\src\\test\\java\\ExcelFile\\Data.xlsx";
		utility xlutil = new utility(path);
  }
  
  @Test(priority=1)
  public void Header() throws InterruptedException, IOException
  {
	  String path = "C:\\Users\\Mian Ali Haider\\eclipse-workspace\\Galaxy\\src\\test\\java\\ExcelFile\\galaxyData.xlsx";
		utility xlutil = new utility(path);
	  Actions action = new Actions(driver);
	  WebDriverWait wait= new WebDriverWait(driver, Duration.ofSeconds(30));
		wait.until(ExpectedConditions.visibilityOf(obj.mainImage));
		wait.until(ExpectedConditions.visibilityOf(obj.products));
		action.moveToElement(obj.products).perform();
		wait.until(ExpectedConditions.visibilityOf(obj.printerAndScanner));
		action.moveToElement(obj.printerAndScanner).perform();
		wait.until(ExpectedConditions.visibilityOf(obj.printerHeader));
		wait.until(ExpectedConditions.visibilityOf(obj.HP));
		obj.HP.click();
		wait.until(ExpectedConditions.visibilityOf(obj.banner));
		wait.until(ExpectedConditions.elementToBeClickable(obj.HPNames.get(5)));
		
		
		
		
		
		/*

		
		//sending the Headers into the excel file	
		for (int i=0, j=0 ; j<obj.allHeaders.size(); j++)
		{
			wait.until(ExpectedConditions.visibilityOf(obj.allHeaders.get(j)));  
			String elementText = obj.allHeaders.get(j).getText();
			xlutil.setCellData("Sheet1",i,j,elementText);
			System.out.println("Data Sent");
		}
		
		int rowFilled = xlutil.getRowCount("sheet1");
		int columnFilled = xlutil.getCellCount("sheet1",rowFilled);
	
	// Sending the printer list into excel
		for ( int i= 1 ,k=0, j = 0; i <= obj.printerList.size() && k<obj.printerList.size(); i++, k++)
		{
			wait.until(ExpectedConditions.visibilityOf(obj.printerList.get(k)));  
			String elementText = obj.printerList.get(k).getText();
				xlutil.setCellData("Sheet1",i,j,elementText);
				System.out.println("Printer Data Sent");
		}
		
		rowFilled = xlutil.getRowCount("sheet1");
		
		// Sending the tonner list into excel
		
		for ( int i= 1 ,k=0, j = 1; i <= obj.tonnerList.size() && k<obj.tonnerList.size(); i++, k++)
		{
			wait.until(ExpectedConditions.visibilityOf(obj.tonnerList.get(k)));  
			String elementText = obj.tonnerList.get(k).getText();
				xlutil.setCellData("Sheet1",i,j,elementText);
				System.out.println("Toner Data Sent");
		}
		
		// Sending the scanner list into excel
			for ( int i= 1 ,k=0, j = 2; i <= obj.scannerList.size() && k<obj.scannerList.size(); i++, k++)
		{
			wait.until(ExpectedConditions.visibilityOf(obj.scannerList.get(k)));  
			String elementText = obj.scannerList.get(k).getText();
				xlutil.setCellData("Sheet1",i,j,elementText);
				System.out.println("Toner Data Sent");
		}
		
		//Sending Prices into excel
	for (int i=0, j=1; i<obj.HPprices.size(); i++)
	{
		wait.until(ExpectedConditions.elementToBeClickable(obj.HPprices.get(i)));
		String elementText = obj.HPprices.get(i).getText();
		xlutil.setCellData("sheet2", i, j, elementText);
	}
	
		
		
		// Sending HPNames into excel
		for (int i=0, j=0; i<obj.HPNames.size(); i++)
		{
			wait.until(ExpectedConditions.elementToBeClickable(obj.HPNames.get(i)));
			String elementText = obj.HPNames.get(i).getText();
			xlutil.setCellData("sheet2", i, j, elementText);
		}
		
		
			
		// Downloading the images
		
			
		String src = obj.HPimg.get(0).getAttribute("src");
		System.out.println(src);
		URL imageURL = new URL(src);
		BufferedImage saveImage = ImageIO.read(imageURL);
		ImageIO.write(saveImage, "jpg", new File("name" + ".jpg"));
		*/
		 
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		/*
		System.out.println(obj.allHeaders.get(0).getText());
		System.out.println(obj.allHeaders.get(1).getText());
		System.out.println(obj.allHeaders.get(2).getText());
		System.out.println(obj.printerList.get(0).getText());
		System.out.println(obj.printerList.get(1).getText());
		System.out.println(obj.tonnerList.get(0).getText());
		System.out.println(obj.tonnerList.get(1).getText());
		System.out.println(obj.scannerList.get(0).getText());
		System.out.println(obj.scannerList.get(1).getText());
		System.out.println(obj.scannerList.get(2).getText());
		*/
		
	  
	  
	  
	  
	  
	  
	  
	  
	  /* Actions action = new Actions(driver);
	  WebDriverWait wait= new WebDriverWait(driver, Duration.ofSeconds(15));
		wait.until(ExpectedConditions.visibilityOf(obj.mainImage));
		wait.until(ExpectedConditions.visibilityOf(obj.products));
		action.moveToElement(obj.products).perform();
		wait.until(ExpectedConditions.visibilityOf(obj.printerAndScanner));
		action.moveToElement(obj.printerAndScanner).perform();
		Thread.sleep(5000); */
  }

  @AfterTest
  public void afterTest() {
	  
  }

}
-----------------------------------------

package GalaxySite;

import java.util.List;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class elements {
	WebDriver driver; 
	

	




	public elements(WebDriver driver) {
this.driver=driver;
		
		PageFactory.initElements(driver ,this);
		System.out.println("Parameterized Constructer");
		// TODO Auto-generated constructor stub
	}




	@FindBy(xpath= "//img[@class=\"tp-rs-img\"]")
	WebElement mainImage;
	
	@FindBy(xpath= "//ul[@id=\"menu-all-departments-1\"]/descendant::a[@title=\"Printer & Scanner\"]/parent::li")
	WebElement printerAndScanner;
	
	@FindBy(xpath="//span[text()=\"PRODUCTS\"]")
	WebElement products;
	
	@FindBy(xpath="//ul[@class=\"dropdown-menu yamm\"]//a[@title=\"Printer & Scanner\"]/following-sibling::ul//strong[text()=\"Printers\"]/parent::li/parent::ul/child::li/strong")
	WebElement printerHeader;
	
	@FindBy(xpath="//ul[@class=\"dropdown-menu yamm\"]//a[@title=\"Printer & Scanner\"]/following-sibling::ul//strong")
	List <WebElement> allHeaders;
	
	@FindBy(xpath="//ul[@class=\"dropdown-menu yamm\"]//a[@title=\"Printer & Scanner\"]/following-sibling::ul//strong[text()=\"Printers\"]/parent::li/parent::ul/child::li/a")
	List <WebElement> printerList;
	
	@FindBy(xpath="//ul[@class=\"dropdown-menu yamm\"]//a[@title=\"Printer & Scanner\"]/following-sibling::ul//strong[text()=\"Toner & Cartridges\"]/parent::li/parent::ul/child::li/a")
	List <WebElement> tonnerList;
	
	@FindBy(xpath="//ul[@class=\"dropdown-menu yamm\"]//a[@title=\"Printer & Scanner\"]/following-sibling::ul//strong[text()=\"Scanner\"]/parent::li/parent::ul/child::li/a")
	List <WebElement> scannerList;
	
	@FindBy(xpath="//ul[@class=\"dropdown-menu yamm\"]//a[@title=\"Printer & Scanner\"]/following-sibling::ul//strong[text()=\"Printers\"]/parent::li/following-sibling::li[2]")
	WebElement HP;
	
	@FindBy(xpath="//span[text()=\"Computer Ka Sub Kuch Milega\"]")
	WebElement banner;
	
	@FindBy(xpath="//div[@class=\"product-loop-body product-item__body\"]//h2")
	List <WebElement>HPNames;
	
	@FindBy(xpath="//div[@class=\"product-loop-footer product-item__footer\"]//bdi")
	List <WebElement>HPprices;
	
	@FindBy(xpath="//a[@class=\"page-numbers\"]")
	WebElement nextPage;
	
	@FindBy(xpath="//div[@class=\"product-thumbnail product-item__thumbnail\"]/child::img")
	List <WebElement>HPimg;
	
	

}

---------------------------------------

package GalaxySite;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;

import java.io.Closeable;
import java.io.File;

public class utility {

	public FileInputStream fi;
	public FileOutputStream fo;
	public XSSFWorkbook workBook;
	public XSSFSheet sheet;
	public XSSFRow row;
	public XSSFCell cell;
	public CellStyle style;
	String path;
	
	utility(String path)

	{
		this.path = path;
	}
	
	 {
		// TODO Auto-generated constructor stub
	}

	public int getRowCount(String sheetName)
	{
		int rowCount = 0;
		try{
			fi = new FileInputStream(path);
			 workBook = new XSSFWorkbook(fi);
		sheet = workBook.getSheet(sheetName);
			rowCount = sheet.getLastRowNum(); // it returns the last initialized row in the sheet
			// workBook.close();
			fi.close();
			
		}
		catch(Exception ecp){
			System.out.println("Row Count Not Working");
			}
		return rowCount;
	}
	
	public int getCellCount(String sheetName, int rowNum ) throws IOException
	{
		int cellCount = 0;
		try{
			fi = new FileInputStream(path);
			 workBook = new XSSFWorkbook(fi);
		sheet = workBook.getSheet(sheetName);
		    row = sheet.getRow(rowNum);
			cellCount = row.getLastCellNum(); // it returns the last initialized row in the sheet
			((Closeable) workBook).close();
			fi.close();
			
		}
		catch(Exception ecp){
			System.out.println("Cell Count Not Working");
			}
		return cellCount;
	}
	
	public String getCellData(String sheetName, int rowNum, int column) throws IOException
	{
	
			fi = new FileInputStream(path);
			 workBook = new XSSFWorkbook(fi);
		sheet = workBook.getSheet(sheetName);
		    row = sheet.getRow(rowNum);
		    cell = row.getCell(column);
		DataFormatter formatter = new DataFormatter();
		String data;
		
			
		try {
			data = formatter.formatCellValue(cell); // Returns the value of cell in a string
		}
		catch(Exception e){
			data="";
			}
		//	workBook.close();
		fi.close();
		return data;
	}
	
	public void setCellData(String sheetName, int rowNum, int column, String data) throws IOException
	{
		File xlfile = new File (path);
		if(!xlfile.exists()) // If file not exists, it will create a file
		{
			workBook= new XSSFWorkbook();
			fo = new FileOutputStream(path);
			workBook.write(fo);
		}
		
		fi = new FileInputStream(path);
		 workBook = new XSSFWorkbook(fi);
		 
		 if (workBook.getSheetIndex(sheetName)==-1) // if sheet doesnt exist, create a new sheet
		 { workBook.createSheet(sheetName);}
		 
		 sheet = workBook.getSheet(sheetName);
		 
		 if (sheet.getRow(rowNum)==null) // if row doesnt exist, create a new sheet
		 { sheet.createRow(rowNum); }
		 
		 row = sheet.getRow(rowNum);
		 
		 cell = row.createCell(column);
		 cell.setCellValue(data);
		 fo = new FileOutputStream (path);
		 workBook.write(fo);
		 // workBook.close();
		 fi.close();
		 fo.close();
		 
		 
		 
		
	}

}
